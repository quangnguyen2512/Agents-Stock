# test1.py ‚Äî Golden Key | PE Percentile Valuation (AI-first) ‚Äî revised with 25‚Äì99 percentiles

import os
import json
import asyncio
import traceback
import pandas as pd
import streamlit as st

# Import n·ªôi b·ªô
try:
    from src.data.pe_api import PEAPI
    from src.agents.pe_valuation_analyst import MarketContext, PEValuationAnalyst
    IMPORT_OK = True
except ImportError as e:
    IMPORT_OK = False
    IMPORT_ERR = str(e)

# -----------------------------
# Helpers
# -----------------------------
def get_api_key():
    
    try:
        with open("config.json", "r") as f:
            cfg = json.load(f)
            return cfg.get(f"{code}", "")
    except Exception:
        return ""

def ensure_event_loop():
    # Streamlit th∆∞·ªùng c√≥ loop s·∫µn, c·∫ßn nest_asyncio khi ch·∫°y trong notebook/thread
    try:
        loop = asyncio.get_event_loop()
        if loop.is_running():
            try:
                import nest_asyncio
                nest_asyncio.apply()
            except Exception:
                pass
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

def run_async(coro):
    ensure_event_loop()
    return asyncio.run(coro)

def fmt_number(v, nd=0, default="N/A"):
    if isinstance(v, (int, float)) and pd.notna(v):
        return f"{v:,.{nd}f}"
    return default

def safe_percent(v, nd=1):
    try:
        return f"{float(v):.{nd}f}%"
    except Exception:
        return "N/A"


# -----------------------------
# UI Config
# -----------------------------
st.set_page_config(
    page_title="Golden Key - PE Percentile Valuation (AI)",
    layout="wide",
    initial_sidebar_state="expanded",
)

st.title("üéØ Golden Key | ƒê·ªãnh gi√° PE")
if not IMPORT_OK:
    st.error(f"‚ùå L·ªói import modules: {IMPORT_ERR}")
    st.stop()

# -----------------------------
# Sidebar
# -----------------------------
with st.sidebar:
    st.header("‚öôÔ∏è C·∫•u h√¨nh")
    code = st.text_input("Gemini API Key", value="", type="password")
    default_api_key = get_api_key()
    API_KEY = default_api_key
    model_name = "gemini-2.0-flash"

    symbol = st.text_input("M√£ c·ªï phi·∫øu (HOSE)", value="ACB").strip().upper()

    col_a, col_b = st.columns(2)
    with col_a:
        test_btn = st.button("üîç Test d·ªØ li·ªáu", use_container_width=True)
    with col_b:
        run_btn = st.button("üéØ Ph√¢n t√≠ch AI", type="primary", use_container_width=True)


def load_core_data(sym: str):
    pe_api = PEAPI(sym)
    price_df = pe_api.get_price_history()            # descending by time
    ratio_df = pe_api.get_ratio_data()               # quarterly
    pe_df = pe_api.compute_pe_trailing()             # merged with EPS_nam + PEtrailing
    stats = pe_api.calculate_pe_distribution_stats(pe_df)  # distribution statistics
    return pe_api, price_df, ratio_df, pe_df, stats

def extract_eps_ttm(pe_df: pd.DataFrame) -> float | None:
    try:
        return float(pe_df.iloc[0]["EPS_nam"])
    except Exception:
        return None

def current_close(pe_df: pd.DataFrame) -> float | None:
    try:
        return float(pe_df.iloc[0]["close"])
    except Exception:
        return None

def current_petrailing(pe_df: pd.DataFrame) -> float | None:
    try:
        return float(pe_df.iloc[0]["PEtrailing"])
    except Exception:
        return None

def show_distribution_metrics(stats: dict, pe_df: pd.DataFrame):
    st.subheader("üìä Ph√¢n ph·ªëi PE (m√¥ t·∫£)")
    c1, c2, c3, c4 = st.columns(4)
    with c1:
        st.metric("PE hi·ªán t·∫°i", f"{stats.get('current_pe', 'N/A')}")
    with c2:
        pct = stats.get("current_percentile")
        pct_str = f"{round(pct,1)}%" if isinstance(pct, (int,float)) else "N/A"
        st.metric("Percentile hi·ªán t·∫°i", pct_str)
    with c3:
        st.metric("PE Median (P75)", f"{stats.get('percentile_75', 'N/A')}")
    with c4:
        cur_px = current_close(pe_df)
        st.metric("Gi√° hi·ªán t·∫°i", f"{fmt_number(cur_px, 0) if cur_px is not None else 'N/A'}")

    c5, c6, c7, c8 = st.columns(4)
    with c5:
        st.metric("Mean", f"{stats.get('mean','N/A')}")
    with c6:
        st.metric("Std", f"{stats.get('std','N/A')}")
    with c7:
        st.metric("Z-score hi·ªán t·∫°i", f"{stats.get('current_z_score','N/A')}")
    with c8:
        st.metric("CV", f"{stats.get('coefficient_of_variation','N/A')}")


   

if run_btn:
    if not API_KEY:
        st.error("‚ùå Vui l√≤ng nh·∫≠p l·∫°i code.")
        st.stop()
    if not symbol:
        st.error("‚ùå Vui l√≤ng nh·∫≠p m√£ h·ª£p l·ªá.")
        st.stop()

    status = st.empty()
    try:

        pe_api, price_df, ratio_df, pe_df, stats = load_core_data(symbol)

        ctx = MarketContext(symbol=symbol)
        agent = PEValuationAnalyst(api_key=API_KEY, model=model_name)
        status.text("üéØ Ph√¢n t√≠ch ƒë·ªãnh gi√° d·ª±a tr√™n ph√¢n ph·ªëi PE (AI)...")
        resp = run_async(agent.analyze(ctx))
        status.text("‚úÖ Ho√†n t·∫•t ph√¢n t√≠ch")

        show_distribution_metrics(stats, pe_df)

        st.subheader(f"üß† K·∫øt qu·∫£ ph√¢n t√≠ch cho {symbol}")
        st.write(resp.recommendation)
        
       

        st.subheader("üéØ ƒê·ªãnh gi√° theo c√°c k·ªãch b·∫£n")
        if resp.content:
                data = resp.content
                if "quick_conclusion" in data:
                    st.info(f"üí° {data['quick_conclusion']}")

                pe_val = data.get("pe_valuation", {}) or {}
                
                   


        # Raw JSON
        st.subheader("üìà K·ªãch b·∫£n (AI)")
        scenarios = resp.content.get("pe_valuation", {}).get("scenarios", {}) if resp.content else {}
        if scenarios:
                rows = []
                for name, sc in scenarios.items():
                    tp_val = sc.get("target_price", "N/A")
                    tp_str = fmt_number(tp_val, 0) if isinstance(tp_val, (int,float)) else str(tp_val)

                    rows.append({
                        "K·ªãch b·∫£n": name.title(),
                        "PE Target (AI)": sc.get("pe", "N/A"),
                        "Gi√° m·ª•c ti√™u (AI)": tp_str,
                        "X√°c su·∫•t (AI)": sc.get("probability","N/A"),
                        "L√Ω do (r√∫t g·ªçn)": sc.get("rationale","")
                    })
                st.dataframe(pd.DataFrame(rows), use_container_width=True)
                st.caption("C√°c m·ªëc m·ª•c ti√™u, x√°c su·∫•t v√† l√Ω do ƒë·ªÅu do AI suy lu·∫≠n t·ª´ ph√¢n ph·ªëi PE v√† th·ªëng k√™ l·ªãch s·ª≠.")

    except Exception as e:
        progress.empty()
        status.empty()
        st.error(f"‚ùå L·ªói ph√¢n t√≠ch: {e}")
        with st.expander("Chi ti·∫øt l·ªói"):
            st.code(traceback.format_exc())
